#!/usr/bin/env ruby

require 'date'

def query(cmd)
  `#{cmd}`.chomp
end

def command(cmd)
  # quietly executes, but does tell you the exit status
  system("#{cmd} > /dev/null 2>&1")
end

MergeInformation = Struct.new(:branch) do
  def conflict?
    conflict_diff.size > 0
  end

  def description
    "#{file_count} files, #{conflict_lines} line conflict with #{branch}, last authored by #{last_author}"
  end

  def <=>(their)
    sort_fields <=> their.sort_fields
  end

  protected

  def sort_fields
    [file_count, conflict_lines]
  end

  private

  def file_count
    diff_extract(/(\d+) file/).to_i
  end

  def conflict_lines
    insertion_count + deletion_count
  end

  def insertion_count
    diff_extract(/(\d+) insertion/).to_i
  end

  def deletion_count
    diff_extract(/(\d+) deletion/).to_i
  end

  def diff_extract(regex)
    if match = conflict_diff.match(regex)
      match[1]
    else
      nil
    end
  end

  def conflict_diff
    @conflict_diff ||= begin
      # sadly we can't dry run a merge
      command("git merge --no-ff --no-commit #{branch}")
      query("git diff --shortstat").tap do
        command("git merge --abort")
      end
    end
  end

  def last_author
    query("git log -n1 --format='%an <%ae>' #{branch}")
  end
end

BranchAgeChecker = Struct.new(:branch, :stale_cutoff_date) do
  def stale?
    last_touched < stale_cutoff_date
  end

  private

  def last_touched
    Date.parse(log_date)
  end

  def log_date
    query("git log -1 --date=iso --format=%cd #{branch}")
  end
end

MergeRacer = Struct.new(:branch) do
  MAINLINE = "origin/HEAD" # defaultly origin/master
  STALE_THRESHOLD = 4 * 7 # days
  SEPARATOR = "\n"

  def call
    if dirty?
      puts "Cowardly refusing to run, please commit your work or update .gitignore"
      puts "You can figure out what files to modify with\n"
      puts "  git status"
    elsif merge_conflicts.none?
      puts "Congratulations! Your branch doesn't conflict with anyone"
    else
      puts "Danger! Merge race in progress"
      merge_conflicts.each do |merge|
        puts "* #{merge.description}"
      end
    end

    puts SEPARATOR
  end

  def abort
    puts "Abort! Abort!"
    command("git merge --abort")
  end

  private

  def dirty?
    query("git status --porcelain").length > 0
  end

  def merge_conflicts
    @merge_conflicts ||= recent_merges.select(&:conflict?)
  end

  def recent_merges
    branches_from_merge_base
      .reject { |branch| BranchAgeChecker.new(branch, stale_cutoff).stale? }
      .map    { |branch| MergeInformation.new(branch) }
  end

  def branches_from_merge_base
    query("git branch --remotes --no-merged #{MAINLINE}").split("\n").map(&:strip)
  end

  def stale_cutoff
    Date.today - STALE_THRESHOLD
  end
end

service = MergeRacer.new("HEAD")
Signal.trap("INT") { service.abort and exit }
service.call
